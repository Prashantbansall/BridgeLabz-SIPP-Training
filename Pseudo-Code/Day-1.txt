============ JAVA OOPS ===============

Q1. Pet Adoption App

class pet
  attribute bark;
  attribute scream;
  attribute lovable;
constructor pet{
  this.bark=bark
  this.scream = scream
  this.lovable= lovable
}
 
class dog extends pet
   attributes
     
class cat extends pet
  attributes 

class Bird extends pet
  attributes 
     
---------------------------------------------

Q2. Library Membership Tracker

class Member 
   attribute Name
   attributes Id
   attributes membershipdate

constructor Member{
this.name = name
this.id= id
this.membershipdate = membershipdate

}
  Method checkvalid()

================== JAVA OOPS ENDS =========================
         


=============== Data Structures & Algorithms ========================

Q1. Undo Feature in Text Editor
MAIN:
    CREATE empty Stack textStack
    PUSH "Hello" into stack
    PUSH "Hello World" into stack
    PUSH "Hello World!" into stack
    PRINT top of stack (peek)

    POP last element from stack (undo)
    PRINT top of stack (peek) again

-------------------------------------------------------------

Q2. Call Center Queue Management
CLASS Customer IMPLEMENT Comparable
    ATTRIBUTES: name, priority ("normal" or "emergency")
    METHOD compareTo(other)
        IF this.priority == "emergency" AND other.priority == "normal"
            RETURN -1 (this comes first)
        ELSE IF this.priority == "normal" AND other.priority == "emergency"
            RETURN 1 (this comes later)
        ELSE RETURN 0

MAIN:
    CREATE PriorityQueue queue
    ADD customers with different priorities
    WHILE queue is not empty
        REMOVE and PRINT the highest-priority customer

================= Data Structures & Algorithms Ends ===================



======================= Collections, Generics, Streams =====================

Q1.Student Score Storage
MAIN:
    CREATE HashMap scores
    ADD "Alice" -> 85
    ADD "Bob" -> 92
    ADD "Charlie" -> 78

    FIND entry with maximum value using stream
    STORE the key of that entry in topStudent
    PRINT topStudent

---------------------------------------------------------

Q2. Employee Record Keeper
CLASS Employee
    ATTRIBUTES: name, department
    CONSTRUCTOR(name, department)
        SET attributes

MAIN:
    CREATE ArrayList employees
    ADD employees with names and departments

    FILTER list to include only employees with department = "IT"
    PRINT names of filtered employees

==================== Collections, Generics, Streams Ends =======================





