========================== Java OOPS ============================

Q1. Traffic Signal Simulation

ENUM TrafficLight
    RED
    YELLOW
    GREEN
END ENUM

CLASS TrafficSignal
    VARIABLE currentLight : TrafficLight

    METHOD constructor()
        currentLight <- RED
    END METHOD

    METHOD changeLight()
        IF currentLight == RED THEN
            currentLight <- GREEN
        ELSE IF currentLight == GREEN THEN
            currentLight <- YELLOW
        ELSE IF currentLight == YELLOW THEN
            currentLight <- RED
        END IF
    END METHOD

    METHOD displayLight()
        PRINT "Current Light: " + currentLight
    END METHOD
END CLASS

MAIN
    CREATE signal <- new TrafficSignal()

    LOOP forever
        signal.displayLight()
        WAIT 5 seconds
        signal.changeLight()
    END LOOP
END MAIN

---------------------------------------------------------

Q2. Smart Farming System

ABSTRACT CLASS Crop
    ATTRIBUTE name

    METHOD constructor(name)
        this.name <- name
    END METHOD

    ABSTRACT METHOD waterRequirement()
    ABSTRACT METHOD harvest()
END CLASS

CLASS Rice EXTENDS Crop
    METHOD constructor()
        CALL super("Rice")
    END METHOD

    METHOD waterRequirement()
        PRINT "Rice needs high water supply"
    END METHOD

    METHOD harvest()
        PRINT "Rice harvested after 120 days"
    END METHOD
END CLASS

CLASS Wheat EXTENDS Crop
    METHOD constructor()
        CALL super("Wheat")
    END METHOD

    METHOD waterRequirement()
        PRINT "Wheat needs moderate water supply"
    END METHOD

    METHOD harvest()
        PRINT "Wheat harvested after 90 days"
    END METHOD
END CLASS

MAIN
    CREATE crop1 <- new Rice()
    CREATE crop2 <- new Wheat()

    crop1.waterRequirement()
    crop1.harvest()

    crop2.waterRequirement()
    crop2.harvest()
END MAIN

============================= JAVA OOPS ENDS ============================


=============================== Data Structures & Algorithms ===============================

Q1. Online Quiz Timer

CLASS QuizTimer
    ATTRIBUTE slots[]
    ATTRIBUTE totalQuestions
    ATTRIBUTE currentIndex

    METHOD constructor(slotsArray)
        slots <- slotsArray
        totalQuestions <- length(slotsArray)
        currentIndex <- 0
    END METHOD

    METHOD startQuiz()
        LOOP i FROM 0 TO totalQuestions-1
            currentTime <- slots[currentIndex]

            WHILE currentTime > 0
                PRINT "Time remaining for Question " + (i+1) + ": " + currentTime + " sec"
                IF currentTime <= 5 THEN
                    PRINT "Warning"
                END IF
                WAIT 1 second
                currentTime <- currentTime - 1
            END WHILE

            PRINT "Time over for Question " + (i+1)
            currentIndex <- (currentIndex + 1) MOD totalQuestions
        END LOOP
    END METHOD
END CLASS

MAIN
    slots <- [30, 45, 60]
    quiz <- new QuizTimer(slots)
    quiz.startQuiz()
END MAIN

----------------------------------------------------------------------------

Q2. Job Scheduler

CLASS Job
    ATTRIBUTE jobId
    ATTRIBUTE deadline
    ATTRIBUTE processingTime

    METHOD constructor(id, deadline, time)
        jobId <- id
        deadline <- deadline
        processingTime <- time
    END METHOD
END CLASS

CLASS JobScheduler
    ATTRIBUTE jobQueue

    METHOD constructor()
        jobQueue <- new PriorityQueue
    END METHOD

    METHOD addJob(job)
        jobQueue.insert(job)
    END METHOD

    METHOD scheduleJobs()
        WHILE jobQueue is not empty
            job <- jobQueue.remove()
            PRINT "Processing Job: " + job.jobId + " | Deadline: " + job.deadline
        END WHILE
    END METHOD
END CLASS

MAIN
    scheduler <- new JobScheduler()
    scheduler.addJob( Job("J1", 3, 10) )
    scheduler.addJob( Job("J2", 1, 5) )
    scheduler.addJob( Job("J3", 2, 2) )

    scheduler.scheduleJobs()
END MAIN

========================= Data Structures & Algorithms ends ======================


================================ Collections, Generics, Streams =========================

Q1. Online Store Cart System
CLASS Item
    ATTRIBUTE name
    ATTRIBUTE price

    METHOD constructor(name, price)
        this.name <- name
        this.price <- price
    END METHOD
END CLASS

CLASS ShoppingCart
    ATTRIBUTE cartItems : List<Item>

    METHOD constructor()
        cartItems <- empty List
    END METHOD

    METHOD addItem(item)
        cartItems.add(item)
    END METHOD

    GENERIC METHOD calculateTotalPrice(List<T>)
        total <- 0
        FOR each element e IN List
            total <- total + e.price
        END FOR
        RETURN total
    END METHOD
END CLASS

MAIN
    cart <- new ShoppingCart()
    cart.addItem( Item("Laptop", 50000) )
    cart.addItem( Item("Mouse", 500) )

    total <- cart.calculateTotalPrice(cart.cartItems)
    PRINT "Total Price: " + total
END MAIN
-----------------------------------------------------------------------
Q6.
CLASS Doctor
    ATTRIBUTE name
    ATTRIBUTE specialization

    METHOD constructor(name, specialization)
        this.name <- name
        this.specialization <- specialization
    END METHOD
END CLASS

CLASS Hospital
    ATTRIBUTE departmentMap : Map<String, List<Doctor>>

    METHOD constructor()
        departmentMap <- empty Map
    END METHOD

    METHOD addDoctor(department, doctor)
        IF departmentMap[department] does not exist THEN
            departmentMap[department] <- new List
        END IF
        departmentMap[department].add(doctor)
    END METHOD

    METHOD filterDoctorsBySpecialization(specialization)
        result <- new List
        FOR EACH dept IN departmentMap
            FOR EACH doctor IN departmentMap[dept]
                IF doctor.specialization == specialization THEN
                    result.add(doctor)
                END IF
            END FOR
        END FOR
        RETURN result
    END METHOD
END CLASS

MAIN
    hospital <- new Hospital()
    hospital.addDoctor("Cardiology", Doctor("Dr. A", "Heart"))
    hospital.addDoctor("Neurology", Doctor("Dr. B", "Brain"))
    hospital.addDoctor("Cardiology", Doctor("Dr. C", "Heart"))

    result <- hospital.filterDoctorsBySpecialization("Heart")
    PRINT "Doctors with specialization 'Heart': "
    FOR EACH doctor IN result
        PRINT doctor.name
    END FOR
END MAIN
