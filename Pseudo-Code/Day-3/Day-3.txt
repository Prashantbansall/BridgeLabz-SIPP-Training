Q1.
CLASS Customer
    ATTRIBUTE name
    ATTRIBUTE address
    METHOD constructor(name, address)
        this.name <- name
        this.address <- address
    END METHOD
END CLASS

CLASS Restaurant
    ATTRIBUTE name
    ATTRIBUTE location
    METHOD constructor(name, location)
        this.name <- name
        this.location <- location
    END METHOD
END CLASS

CLASS DeliveryBoy
    ATTRIBUTE name
    ATTRIBUTE phone
    METHOD constructor(name, phone)
        this.name <- name
        this.phone <- phone
    END METHOD
END CLASS

CLASS Order
    ATTRIBUTE customer : Customer
    ATTRIBUTE restaurant : Restaurant
    ATTRIBUTE deliveryBoy : DeliveryBoy
    ATTRIBUTE items : List<String>

    METHOD constructor(customer, restaurant, deliveryBoy, items)
        this.customer <- customer
        this.restaurant <- restaurant
        this.deliveryBoy <- deliveryBoy
        this.items <- items
    END METHOD

    METHOD showOrderDetails()
        PRINT "Customer: " + customer.name + " (" + customer.address + ")"
        PRINT "Restaurant: " + restaurant.name + " (" + restaurant.location + ")"
        PRINT "Delivery By: " + deliveryBoy.name + " (" + deliveryBoy.phone + ")"
        PRINT "Items: " + items
    END METHOD
END CLASS

MAIN
    cust <- new Customer("Aman", "Delhi")
    rest <- new Restaurant("FoodHub", "Connaught Place")
    boy <- new DeliveryBoy("Rahul", "9999999999")
    items <- ["Burger", "Fries", "Coke"]

    order <- new Order(cust, rest, boy, items)
    order.showOrderDetails()
END MAIN
-------------------------------------------------------------------------------
Q2.
INTERFACE Searchable
    METHOD search(keyword)
END INTERFACE

INTERFACE Printable
    METHOD print()
END INTERFACE

CLASS LabReport IMPLEMENTS Searchable, Printable
    ATTRIBUTE patientName
    ATTRIBUTE testResults

    METHOD constructor(patientName, testResults)
        this.patientName <- patientName
        this.testResults <- testResults
    END METHOD

    METHOD search(keyword)
        IF keyword IN testResults THEN
            RETURN true
        ELSE
            RETURN false
        END IF
    END METHOD

    METHOD print()
        PRINT "Lab Report for " + patientName
        PRINT "Results: " + testResults
    END METHOD
END CLASS

CLASS PrescriptionReport IMPLEMENTS Searchable, Printable
    ATTRIBUTE patientName
    ATTRIBUTE medicines

    METHOD constructor(patientName, medicines)
        this.patientName <- patientName
        this.medicines <- medicines
    END METHOD

    METHOD search(keyword)
        RETURN keyword IN medicines
    END METHOD

    METHOD print()
        PRINT "Prescription Report for " + patientName
        PRINT "Medicines: " + medicines
    END METHOD
END CLASS

MAIN
    report1 <- new LabReport("Aman", ["Blood Test: Normal", "X-Ray: Clear"])
    report2 <- new PrescriptionReport("Aman", ["Paracetamol", "Amoxicillin"])

    reports <- [report1, report2]

    FOR EACH r IN reports
        r.print()
        IF r.search("Paracetamol") THEN
            PRINT "Search Found in: " + r
        END IF
    END FOR
END MAIN
-------------------------------------------------------------------
Q3.
CLASS Patient
    ATTRIBUTE id
    ATTRIBUTE name
    ATTRIBUTE age

    METHOD constructor(id, name, age)
        this.id ← id
        this.name ← name
        this.age ← age
    END METHOD
END CLASS

CLASS PatientRecordManager
    ATTRIBUTE recordMap : HashMap<id, Patient>

    METHOD constructor()
        recordMap ← empty HashMap
    END METHOD

    METHOD addPatient(patient)
        recordMap[patient.id] ← patient
    END METHOD

    METHOD getPatient(id)
        RETURN recordMap[id]
    END METHOD

    METHOD updatePatient(id, newName, newAge)
        IF id IN recordMap THEN
            recordMap[id].name <- newName
            recordMap[id].age <- newAge
        END IF
    END METHOD

    METHOD deletePatient(id)
        REMOVE recordMap[id]
    END METHOD
END CLASS

MAIN
    manager <- new PatientRecordManager()
    manager.addPatient( Patient(1, "Aman", 25) )
    manager.addPatient( Patient(2, "Jatin", 30) )

    p ← manager.getPatient(1)
    PRINT "Patient Found: " + p.name

    manager.updatePatient(2, "Jatin Sharma", 31)

    manager.deletePatient(1)
END MAIN
------------------------------------------------------------------------------
Q4.
CLASS MazeSolver
    METHOD solveMaze(maze, x, y, solution)
        IF x == destinationX AND y == destinationY THEN
            solution[x][y] <- 1
            RETURN true
        END IF

        IF isSafe(maze, x, y) THEN
            solution[x][y] ← 1   // mark path

            // Move Right
            IF solveMaze(maze, x, y+1, solution) THEN
                RETURN true
            END IF

            // Move Down
            IF solveMaze(maze, x+1, y, solution) THEN
                RETURN true
            END IF

            // Backtrack
            solution[x][y] ← 0
            RETURN false
        END IF

        RETURN false
    END METHOD

    METHOD isSafe(maze, x, y)
        RETURN (x, y are inside maze AND maze[x][y] == 0)
    END METHOD
END CLASS

MAIN
    maze <- [
        [0, 1, 0, 0],
        [0, 0, 0, 1],
        [1, 0, 1, 0],
        [0, 0, 0, 0]
    ]
    solution <- empty matrix same size as maze

    solver <- new MazeSolver()
    IF solver.solveMaze(maze, 0, 0, solution) THEN
        PRINT solution
    ELSE
        PRINT "No path found!"
    END IF
END MAIN
-----------------------------------------------------------------------------------------
Q5.
CLASS Book
    ATTRIBUTE title
    ATTRIBUTE author
    ATTRIBUTE year
    ATTRIBUTE rating

    METHOD constructor(title, author, year, rating)
        this.title <- title
        this.author <- author
        this.year <- year
        this.rating <- rating
    END METHOD
END CLASS

CLASS Library
    ATTRIBUTE books : List<Book>

    METHOD constructor()
        books ← empty List
    END METHOD

    METHOD addBook(book)
        books.add(book)
    END METHOD

    METHOD filterHighRatedRecentBooks()
        RETURN books.stream()
                    .filter( book -> book.year > 2015 )
                    .filter( book -> book.rating > 4.5 )
                    .collectToList()
    END METHOD
END CLASS

MAIN
    lib <- new Library()
    lib.addBook( Book("Java Basics", "John", 2014, 4.2) )
    lib.addBook( Book("Advanced Java", "Aman", 2018, 4.7) )
    lib.addBook( Book("Streams in Action", "Kathy", 2020, 4.8) )

    result ← lib.filterHighRatedRecentBooks()

    PRINT "Books published after 2015 with rating > 4.5:"
    FOR EACH b IN result
        PRINT b.title + " (" + b.year + ", Rating: " + b.rating + ")"
    END FOR
END MAIN
-------------------------------------------------------------------------------
Q6.
CLASS UPI
    ATTRIBUTE upiId
    METHOD constructor(upiId)
        this.upiId <- upiId
    END METHOD
END CLASS

CLASS Card
    ATTRIBUTE cardNumber
    METHOD constructor(cardNumber)
        this.cardNumber <- cardNumber
    END METHOD
END CLASS

CLASS NetBanking
    ATTRIBUTE accountNumber
    METHOD constructor(accountNumber)
        this.accountNumber <- accountNumber
    END METHOD
END CLASS

// Generic Transaction class
CLASS Transaction<T>
    ATTRIBUTE paymentMethod : T
    ATTRIBUTE amount

    METHOD constructor(paymentMethod, amount)
        this.paymentMethod <- paymentMethod
        this.amount <- amount
    END METHOD

    METHOD processPayment()
        PRINT "Processing payment of " + amount + " using " + paymentMethod
    END METHOD
END CLASS

MAIN
    upiPay <- new Transaction<UPI>( UPI("aman@upi"), 1000 )
    cardPay <- new Transaction<Card>( Card("1234-5678-9012"), 5000 )
    netPay <- new Transaction<NetBanking>( NetBanking("ACC123456"), 2000 )

    upiPay.processPayment()
    cardPay.processPayment()
    netPay.processPayment()
END MAIN
